/**
 * üìä Advanced Analytics System 2025
 * 
 * –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–¥–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å ML-–ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏,
 * –∞–Ω–∞–ª–∏–∑–æ–º impermanent loss –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
 */

export interface MarketAnalytics {
  currentPrice: number
  priceChange24h: number
  priceChange7d: number
  volume24h: number
  volumeChange24h: number
  liquidity: number
  liquidityChange24h: number
  volatility: number
  volatilityForecast: number
  marketCap: number
  dominance: number
}

export interface LiquidityAnalytics {
  totalLiquidity: number
  liquidityProviders: number
  averagePositionSize: number
  impermanentLoss: number
  yieldOptimization: YieldStrategy[]
  concentrationRisk: number
  liquidityDistribution: LiquidityDistribution[]
}

export interface YieldStrategy {
  id: string
  name: string
  type: 'staking' | 'liquidity_provision' | 'arbitrage' | 'lending'
  apy: number
  risk: 'low' | 'medium' | 'high'
  minAmount: number
  lockPeriod?: number
  autoCompound: boolean
  description: string
}

export interface LiquidityDistribution {
  range: string
  percentage: number
  amount: number
  providers: number
}

export interface ArbitrageOpportunity {
  id: string
  source: string
  target: string
  profit: number
  profitPercentage: number
  volume: number
  timeWindow: number
  risk: 'low' | 'medium' | 'high'
  gasCost: number
  netProfit: number
}

export interface TradingAnalytics {
  totalVolume: number
  totalTrades: number
  averageTradeSize: number
  successRate: number
  averageSlippage: number
  gasEfficiency: number
  topTraders: TopTrader[]
  tradingPatterns: TradingPattern[]
}

export interface TopTrader {
  address: string
  volume: number
  profit: number
  successRate: number
  trades: number
  reputation: number
}

export interface TradingPattern {
  time: string
  volume: number
  price: number
  volatility: number
  pattern: 'bullish' | 'bearish' | 'sideways' | 'volatile'
}

export interface RiskMetrics {
  var95: number // Value at Risk 95%
  var99: number // Value at Risk 99%
  maxDrawdown: number
  sharpeRatio: number
  sortinoRatio: number
  calmarRatio: number
  beta: number
  correlation: number
}

export interface MLPrediction {
  timeframe: '1h' | '4h' | '24h' | '7d'
  price: number
  confidence: number
  factors: PredictionFactor[]
  accuracy: number
}

export interface PredictionFactor {
  name: string
  weight: number
  impact: 'positive' | 'negative' | 'neutral'
  description: string
}

export class AdvancedAnalyticsSystem {
  private marketData: MarketAnalytics | null = null
  private liquidityData: LiquidityAnalytics | null = null
  private tradingData: TradingAnalytics | null = null
  private riskMetrics: RiskMetrics | null = null
  private mlPredictions: Map<string, MLPrediction> = new Map()
  private arbitrageOpportunities: ArbitrageOpportunity[] = []
  private isCollecting = false
  private collectionInterval?: NodeJS.Timeout

  constructor() {
    this.startDataCollection()
  }

  /**
   * üìä –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
   */
  private startDataCollection(): void {
    if (this.isCollecting) return
    
    this.isCollecting = true
    this.collectionInterval = setInterval(async () => {
      await this.collectAllData()
    }, 30000) // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  }

  /**
   * üîÑ –°–±–æ—Ä –≤—Å–µ—Ö –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  private async collectAllData(): Promise<void> {
    try {
      await Promise.all([
        this.collectMarketData(),
        this.collectLiquidityData(),
        this.collectTradingData(),
        this.calculateRiskMetrics(),
        this.generateMLPredictions(),
        this.scanArbitrageOpportunities()
      ])
    } catch (error) {
      console.error('Error collecting analytics data:', error)
    }
  }

  /**
   * üìà –°–±–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  private async collectMarketData(): Promise<void> {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API
    // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
    
    const basePrice = 42.7
    const volatility = 0.05 // 5% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    
    this.marketData = {
      currentPrice: basePrice + (Math.random() - 0.5) * volatility * basePrice,
      priceChange24h: (Math.random() - 0.5) * 10, // ¬±5%
      priceChange7d: (Math.random() - 0.5) * 20, // ¬±10%
      volume24h: 1000000 + Math.random() * 500000,
      volumeChange24h: (Math.random() - 0.5) * 30, // ¬±15%
      liquidity: 5000000 + Math.random() * 2000000,
      liquidityChange24h: (Math.random() - 0.5) * 10, // ¬±5%
      volatility: 5 + Math.random() * 15, // 5-20%
      volatilityForecast: 5 + Math.random() * 15,
      marketCap: 100000000 + Math.random() * 50000000,
      dominance: 0.5 + Math.random() * 0.3 // 50-80%
    }
  }

  /**
   * üíß –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
   */
  private async collectLiquidityData(): Promise<void> {
    const totalLiquidity = 5000000 + Math.random() * 2000000
    const providers = 100 + Math.floor(Math.random() * 200)
    
    this.liquidityData = {
      totalLiquidity,
      liquidityProviders: providers,
      averagePositionSize: totalLiquidity / providers,
      impermanentLoss: this.calculateImpermanentLoss(),
      yieldOptimization: this.generateYieldStrategies(),
      concentrationRisk: this.calculateConcentrationRisk(),
      liquidityDistribution: this.calculateLiquidityDistribution()
    }
  }

  /**
   * üìä –†–∞—Å—á–µ—Ç impermanent loss
   */
  private calculateImpermanentLoss(): number {
    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç IL
    const priceChange = Math.abs(this.marketData?.priceChange24h || 0) / 100
    const il = 2 * Math.sqrt(priceChange) / (1 + priceChange) - 1
    return Math.max(0, il * 100) // –í –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
  }

  /**
   * üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
   */
  private generateYieldStrategies(): YieldStrategy[] {
    return [
      {
        id: 'staking_basic',
        name: 'Basic Staking',
        type: 'staking',
        apy: 8 + Math.random() * 4, // 8-12%
        risk: 'low',
        minAmount: 1000,
        lockPeriod: 30,
        autoCompound: true,
        description: '–ë–∞–∑–æ–≤—ã–π —Å—Ç–µ–π–∫–∏–Ω–≥ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º'
      },
      {
        id: 'liquidity_provision',
        name: 'Liquidity Provision',
        type: 'liquidity_provision',
        apy: 12 + Math.random() * 8, // 12-20%
        risk: 'medium',
        minAmount: 5000,
        autoCompound: true,
        description: '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –≤ –ø—É–ª—ã'
      },
      {
        id: 'arbitrage_bot',
        name: 'Arbitrage Bot',
        type: 'arbitrage',
        apy: 15 + Math.random() * 10, // 15-25%
        risk: 'high',
        minAmount: 10000,
        autoCompound: false,
        description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞—Ä–±–∏—Ç—Ä–∞–∂ –º–µ–∂–¥—É –±–∏—Ä–∂–∞–º–∏'
      },
      {
        id: 'lending_pool',
        name: 'Lending Pool',
        type: 'lending',
        apy: 6 + Math.random() * 4, // 6-10%
        risk: 'low',
        minAmount: 2000,
        autoCompound: true,
        description: '–ö—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏–µ –≤ –ø—É–ª–∞—Ö –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏'
      }
    ]
  }

  /**
   * ‚ö†Ô∏è –†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏
   */
  private calculateConcentrationRisk(): number {
    // –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–∞ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏
    return 10 + Math.random() * 20 // 10-30%
  }

  /**
   * üìä –†–∞—Å—á–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
   */
  private calculateLiquidityDistribution(): LiquidityDistribution[] {
    const total = this.liquidityData?.totalLiquidity || 5000000
    
    return [
      {
        range: '0-10%',
        percentage: 25 + Math.random() * 10,
        amount: total * 0.25,
        providers: 50 + Math.floor(Math.random() * 30)
      },
      {
        range: '10-25%',
        percentage: 30 + Math.random() * 10,
        amount: total * 0.30,
        providers: 30 + Math.floor(Math.random() * 20)
      },
      {
        range: '25-50%',
        percentage: 25 + Math.random() * 10,
        amount: total * 0.25,
        providers: 15 + Math.floor(Math.random() * 10)
      },
      {
        range: '50%+',
        percentage: 20 + Math.random() * 10,
        amount: total * 0.20,
        providers: 5 + Math.floor(Math.random() * 5)
      }
    ]
  }

  /**
   * üìà –°–±–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  private async collectTradingData(): Promise<void> {
    this.tradingData = {
      totalVolume: 10000000 + Math.random() * 5000000,
      totalTrades: 5000 + Math.floor(Math.random() * 2000),
      averageTradeSize: 2000 + Math.random() * 1000,
      successRate: 85 + Math.random() * 10, // 85-95%
      averageSlippage: 0.1 + Math.random() * 0.4, // 0.1-0.5%
      gasEfficiency: 90 + Math.random() * 8, // 90-98%
      topTraders: this.generateTopTraders(),
      tradingPatterns: this.generateTradingPatterns()
    }
  }

  /**
   * üèÜ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–ø-—Ç—Ä–µ–π–¥–µ—Ä–æ–≤
   */
  private generateTopTraders(): TopTrader[] {
    return Array.from({ length: 10 }, (_, i) => ({
      address: `0x${Math.random().toString(16).substr(2, 8)}...`,
      volume: 100000 + Math.random() * 500000,
      profit: (Math.random() - 0.3) * 100000, // –ú–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
      successRate: 70 + Math.random() * 25, // 70-95%
      trades: 100 + Math.floor(Math.random() * 500),
      reputation: 80 + Math.random() * 20 // 80-100
    })).sort((a, b) => b.volume - a.volume)
  }

  /**
   * üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
   */
  private generateTradingPatterns(): TradingPattern[] {
    const patterns: TradingPattern[] = []
    const now = Date.now()
    
    for (let i = 23; i >= 0; i--) {
      const time = new Date(now - i * 60 * 60 * 1000).toISOString()
      const volume = 1000 + Math.random() * 5000
      const price = 42.7 + (Math.random() - 0.5) * 5
      const volatility = 5 + Math.random() * 15
      
      let pattern: 'bullish' | 'bearish' | 'sideways' | 'volatile'
      if (volatility > 15) pattern = 'volatile'
      else if (price > 44) pattern = 'bullish'
      else if (price < 41) pattern = 'bearish'
      else pattern = 'sideways'
      
      patterns.push({
        time,
        volume,
        price,
        volatility,
        pattern
      })
    }
    
    return patterns
  }

  /**
   * ‚ö†Ô∏è –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ —Ä–∏—Å–∫–∞
   */
  private calculateRiskMetrics(): void {
    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã —Ä–∏—Å–∫–∞
    const volatility = this.marketData?.volatility || 10
    const returns = (this.marketData?.priceChange24h || 0) / 100
    
    this.riskMetrics = {
      var95: volatility * 1.645, // 95% VaR
      var99: volatility * 2.326, // 99% VaR
      maxDrawdown: Math.max(0, -returns * 2), // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
      sharpeRatio: returns / volatility, // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞
      sortinoRatio: returns / (volatility * 0.5), // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –°–æ—Ä—Ç–∏–Ω–æ
      calmarRatio: returns / Math.max(0.01, Math.abs(returns * 2)), // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ö–∞–ª—å–º–∞—Ä–∞
      beta: 0.8 + Math.random() * 0.4, // –ë–µ—Ç–∞-–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
      correlation: 0.5 + Math.random() * 0.3 // –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å —Ä—ã–Ω–∫–æ–º
    }
  }

  /**
   * ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ML-–ø—Ä–æ–≥–Ω–æ–∑–æ–≤
   */
  private async generateMLPredictions(): Promise<void> {
    const timeframes: ('1h' | '4h' | '24h' | '7d')[] = ['1h', '4h', '24h', '7d']
    
    for (const timeframe of timeframes) {
      const prediction = await this.generateMLPrediction(timeframe)
      this.mlPredictions.set(timeframe, prediction)
    }
  }

  /**
   * üîÆ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ML-–ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
   */
  private async generateMLPrediction(timeframe: '1h' | '4h' | '24h' | '7d'): Promise<MLPrediction> {
    const currentPrice = this.marketData?.currentPrice || 42.7
    const volatility = this.marketData?.volatility || 10
    
    // –°–∏–º—É–ª—è—Ü–∏—è ML-–ø—Ä–æ–≥–Ω–æ–∑–∞
    const timeMultiplier = {
      '1h': 0.01,
      '4h': 0.05,
      '24h': 0.2,
      '7d': 1.0
    }[timeframe]
    
    const priceChange = (Math.random() - 0.5) * volatility * timeMultiplier
    const predictedPrice = currentPrice * (1 + priceChange / 100)
    
    const confidence = 60 + Math.random() * 30 // 60-90%
    const accuracy = 70 + Math.random() * 20 // 70-90%
    
    const factors: PredictionFactor[] = [
      {
        name: 'Market Sentiment',
        weight: 0.3,
        impact: priceChange > 0 ? 'positive' : 'negative',
        description: '–û–±—â–∏–π –Ω–∞—Å—Ç—Ä–æ–π —Ä—ã–Ω–∫–∞'
      },
      {
        name: 'Technical Analysis',
        weight: 0.25,
        impact: 'neutral',
        description: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã'
      },
      {
        name: 'Volume Analysis',
        weight: 0.2,
        impact: 'positive',
        description: '–ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤ —Ç–æ—Ä–≥–æ–≤'
      },
      {
        name: 'Volatility Forecast',
        weight: 0.15,
        impact: volatility > 15 ? 'negative' : 'positive',
        description: '–ü—Ä–æ–≥–Ω–æ–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏'
      },
      {
        name: 'Liquidity Depth',
        weight: 0.1,
        impact: 'positive',
        description: '–ì–ª—É–±–∏–Ω–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏'
      }
    ]
    
    return {
      timeframe,
      price: predictedPrice,
      confidence,
      factors,
      accuracy
    }
  }

  /**
   * üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
   */
  private async scanArbitrageOpportunities(): Promise<void> {
    // –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    this.arbitrageOpportunities = []
    
    const exchanges = ['Uniswap', 'PancakeSwap', 'SushiSwap', '1inch', 'STON.fi']
    
    for (let i = 0; i < 3; i++) {
      const source = exchanges[Math.floor(Math.random() * exchanges.length)]
      const target = exchanges[Math.floor(Math.random() * exchanges.length)]
      
      if (source !== target) {
        const profit = 100 + Math.random() * 1000
        const volume = 10000 + Math.random() * 50000
        const gasCost = 5 + Math.random() * 20
        const netProfit = profit - gasCost
        
        if (netProfit > 0) {
          this.arbitrageOpportunities.push({
            id: `arb_${Date.now()}_${i}`,
            source,
            target,
            profit,
            profitPercentage: (profit / volume) * 100,
            volume,
            timeWindow: 300 + Math.random() * 1800, // 5-35 –º–∏–Ω—É—Ç
            risk: netProfit > 500 ? 'low' : netProfit > 100 ? 'medium' : 'high',
            gasCost,
            netProfit
          })
        }
      }
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
    this.arbitrageOpportunities.sort((a, b) => b.netProfit - a.netProfit)
  }

  /**
   * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
   */
  getFullAnalytics() {
    return {
      market: this.marketData,
      liquidity: this.liquidityData,
      trading: this.tradingData,
      risk: this.riskMetrics,
      predictions: Object.fromEntries(this.mlPredictions),
      arbitrage: this.arbitrageOpportunities.slice(0, 10), // –¢–æ–ø-10 –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
      timestamp: Date.now()
    }
  }

  /**
   * üìà –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
   */
  getMarketAnalytics(): MarketAnalytics | null {
    return this.marketData
  }

  /**
   * üíß –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
   */
  getLiquidityAnalytics(): LiquidityAnalytics | null {
    return this.liquidityData
  }

  /**
   * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
   */
  getTradingAnalytics(): TradingAnalytics | null {
    return this.tradingData
  }

  /**
   * ‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Ä–∏—Å–∫–∞
   */
  getRiskMetrics(): RiskMetrics | null {
    return this.riskMetrics
  }

  /**
   * üîÆ –ü–æ–ª—É—á–µ–Ω–∏–µ ML-–ø—Ä–æ–≥–Ω–æ–∑–æ–≤
   */
  getMLPredictions(): Map<string, MLPrediction> {
    return this.mlPredictions
  }

  /**
   * üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
   */
  getArbitrageOpportunities(): ArbitrageOpportunity[] {
    return this.arbitrageOpportunities
  }

  /**
   * üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
   */
  getOptimizationRecommendations(): string[] {
    const recommendations: string[] = []
    
    if (this.liquidityData?.impermanentLoss && this.liquidityData.impermanentLoss > 5) {
      recommendations.push('‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π impermanent loss. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É –ø–æ–∑–∏—Ü–∏–π.')
    }
    
    if (this.riskMetrics?.maxDrawdown && this.riskMetrics.maxDrawdown > 10) {
      recommendations.push('üìâ –í—ã—Å–æ–∫–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞. –£–≤–µ–ª–∏—á—å—Ç–µ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—é.')
    }
    
    if (this.marketData?.volatility && this.marketData.volatility > 20) {
      recommendations.push('üå™Ô∏è –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –∑–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã.')
    }
    
    if (this.arbitrageOpportunities.length > 0) {
      const bestArb = this.arbitrageOpportunities[0]
      if (bestArb.netProfit > 100) {
        recommendations.push(`üí∞ –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å: ${bestArb.source} ‚Üí ${bestArb.target} (+${bestArb.netProfit.toFixed(2)} TON)`)
      }
    }
    
    return recommendations
  }

  /**
   * üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
   */
  stopDataCollection(): void {
    if (this.collectionInterval) {
      clearInterval(this.collectionInterval)
      this.collectionInterval = undefined
    }
    this.isCollecting = false
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞
export const advancedAnalyticsSystem = new AdvancedAnalyticsSystem()
