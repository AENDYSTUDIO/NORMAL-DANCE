/**
 * üõ°Ô∏è Security Sanitization Utilities
 * 
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
 */

import { basename } from 'path'

/**
 * –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫ –æ—Ç XSS –∏ –∏–Ω—ä–µ–∫—Ü–∏–π
 */
export function sanitizeString(input: string): string {
  if (!input || typeof input !== 'string') return ''
  
  return input
    // –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏ –∏ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    .replace(/<[^>]*>/g, '')
    .replace(/[<>\"'&]/g, '')
    // –£–¥–∞–ª—è–µ–º JavaScript —Å–æ–±—ã—Ç–∏—è
    .replace(/on\w+\s*=/gi, '')
    // –£–¥–∞–ª—è–µ–º data: URLs
    .replace(/data:[^;]*;base64,/gi, '')
    // –£–¥–∞–ª—è–µ–º javascript: URLs
    .replace(/javascript:/gi, '')
    // –£–¥–∞–ª—è–µ–º vbscript: URLs
    .replace(/vbscript:/gi, '')
    // –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    .replace(/[\r\n\t]/g, ' ')
    // –£–¥–∞–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    .replace(/\s+/g, ' ')
    .trim()
    .slice(0, 1000) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
}

/**
 * –°—Ç—Ä–æ–≥–∞—è —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π
 */
export function strictSanitizeString(input: string): string {
  if (!input || typeof input !== 'string') return ''
  
  return input
    // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
    .replace(/[^a-zA-Z0-9\s.,!?()-]/g, '')
    .replace(/\s+/g, ' ')
    .trim()
    .slice(0, 500)
}

/**
 * –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export function sanitizeForLog(input: any): string {
  if (input === null || input === undefined) return 'null'
  
  return String(input)
    .replace(/[\r\n]/g, ' ')
    .replace(/[<>\"'&]/g, '')
    .slice(0, 200)
}

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Ç–∏ —Ñ–∞–π–ª–∞
 */
export function validateFilePath(filePath: string): boolean {
  if (!filePath || typeof filePath !== 'string') return false
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ path traversal
  if (filePath.includes('..') || filePath.includes('/') || filePath.includes('\\')) {
    return false
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
  if (!/^[a-zA-Z0-9._-]+$/.test(filePath)) {
    return false
  }
  
  return true
}

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
 */
export function safeBasename(filePath: string): string {
  const safePath = basename(filePath)
  return validateFilePath(safePath) ? safePath : ''
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è IPFS —Ö–µ—à–∞
 */
export function validateIPFSHash(hash: string): boolean {
  if (!hash || typeof hash !== 'string') return false
  return /^[a-zA-Z0-9]{46}$/.test(hash)
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è ID
 */
export function validateId(id: string): boolean {
  if (!id || typeof id !== 'string') return false
  return /^[a-zA-Z0-9-_]+$/.test(id) && id.length <= 50
}

/**
 * –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è JSON –æ—Ç–≤–µ—Ç–∞
 */
export function sanitizeObject(obj: any): any {
  if (!obj || typeof obj !== 'object') return obj
  
  const sanitized: any = {}
  
  for (const [key, value] of Object.entries(obj)) {
    if (typeof value === 'string') {
      sanitized[key] = sanitizeString(value)
    } else if (typeof value === 'object' && value !== null) {
      sanitized[key] = sanitizeObject(value)
    } else {
      sanitized[key] = value
    }
  }
  
  return sanitized
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è URL
 */
export function validateAndSanitizeUrl(url: string): string | null {
  if (!url || typeof url !== 'string') return null
  
  try {
    const urlObj = new URL(url)
    
    // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã
    if (!['http:', 'https:'].includes(urlObj.protocol)) {
      return null
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    const suspiciousDomains = ['localhost', '127.0.0.1', '0.0.0.0']
    if (suspiciousDomains.includes(urlObj.hostname)) {
      return null
    }
    
    return urlObj.toString()
  } catch {
    return null
  }
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è email –∞–¥—Ä–µ—Å–∞
 */
export function validateEmail(email: string): boolean {
  if (!email || typeof email !== 'string') return false
  
  const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/
  return emailRegex.test(email) && email.length <= 254
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è Solana –∞–¥—Ä–µ—Å–∞
 */
export function validateSolanaAddress(address: string): boolean {
  if (!address || typeof address !== 'string') return false
  
  // Solana –∞–¥—Ä–µ—Å–∞ –∏–º–µ—é—Ç –¥–ª–∏–Ω—É 32-44 —Å–∏–º–≤–æ–ª–∞ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–æ–ª—å–∫–æ Base58 —Å–∏–º–≤–æ–ª—ã
  const solanaRegex = /^[1-9A-HJ-NP-Za-km-z]{32,44}$/
  return solanaRegex.test(address)
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
 */
export function validateFileSize(size: number, maxSize: number = 100 * 1024 * 1024): boolean {
  return typeof size === 'number' && size > 0 && size <= maxSize
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è MIME —Ç–∏–ø–∞
 */
export function validateMimeType(mimeType: string, allowedTypes: string[] = [
  'audio/mpeg',
  'audio/wav',
  'audio/flac',
  'audio/ogg',
  'image/jpeg',
  'image/png',
  'image/webp'
]): boolean {
  if (!mimeType || typeof mimeType !== 'string') return false
  return allowedTypes.includes(mimeType)
}

/**
 * –ó–∞—â–∏—Ç–∞ –æ—Ç SQL –∏–Ω—ä–µ–∫—Ü–∏–π (–¥–ª—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
 */
export function escapeSqlString(input: string): string {
  if (!input || typeof input !== 'string') return ''
  
  return input
    .replace(/'/g, "''")  // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
    .replace(/--/g, '')   // –£–¥–∞–ª—è–µ–º SQL –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    .replace(/\/\*/g, '') // –£–¥–∞–ª—è–µ–º –Ω–∞—á–∞–ª–æ –±–ª–æ—á–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    .replace(/\*\//g, '') // –£–¥–∞–ª—è–µ–º –∫–æ–Ω–µ—Ü –±–ª–æ—á–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    .replace(/;/g, '')    // –£–¥–∞–ª—è–µ–º —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è JSON —Å—Ç—Ä–æ–∫–∏
 */
export function validateJsonString(jsonString: string): boolean {
  if (!jsonString || typeof jsonString !== 'string') return false
  
  try {
    JSON.parse(jsonString)
    return true
  } catch {
    return false
  }
}

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
 */
export function processUserInput(input: any, options: {
  maxLength?: number
  allowHtml?: boolean
  strictMode?: boolean
} = {}): string {
  const { maxLength = 1000, allowHtml = false, strictMode = false } = options
  
  if (!input || typeof input !== 'string') return ''
  
  let processed = input
  
  if (strictMode) {
    processed = strictSanitizeString(processed)
  } else if (!allowHtml) {
    processed = sanitizeString(processed)
  }
  
  if (maxLength && processed.length > maxLength) {
    processed = processed.slice(0, maxLength)
  }
  
  return processed
}