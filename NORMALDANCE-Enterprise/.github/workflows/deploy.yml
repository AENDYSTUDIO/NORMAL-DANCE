name: 🚀 Deployment Pipeline

on:
  push:
    branches: [main]
    tags: ["v*"]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: "18.x"
  PNPM_VERSION: "8.x"

jobs:
  # 🏗️ Build Production
  build:
    name: 🏗️ Build Production
    runs-on: ubuntu-latest
    timeout-minutes: 20

    outputs:
      build-version: ${{ steps.version.outputs.version }}
      build-hash: ${{ steps.hash.outputs.hash }}

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Run Tests
        run: pnpm test:ci

      - name: 🏗️ Build Application
        run: pnpm build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_APP_VERSION: ${{ steps.version.outputs.version }}
          NEXT_PUBLIC_BUILD_HASH: ${{ steps.hash.outputs.hash }}

      - name: 📊 Generate Build Info
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: 🔑 Generate Build Hash
        id: hash
        run: |
          HASH=$(git rev-parse --short HEAD)
          echo "hash=$HASH" >> $GITHUB_OUTPUT

      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: production-build
          path: |
            .next/
            public/
            package.json
            pnpm-lock.yaml
          retention-days: 30

  # 🧪 Staging Deployment
  deploy-staging:
    name: 🧪 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging

    steps:
      - name: 📥 Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: production-build

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🚀 Deploy to Staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: pnpm deploy:staging
        env:
          NODE_ENV: staging
          BUILD_VERSION: ${{ needs.build.outputs.build-version }}
          BUILD_HASH: ${{ needs.build.outputs.build-hash }}

      - name: 🧪 Run Smoke Tests
        run: pnpm test:smoke
        env:
          BASE_URL: ${{ secrets.STAGING_URL }}

      - name: 📊 Run Performance Tests
        run: pnpm test:performance
        env:
          BASE_URL: ${{ secrets.STAGING_URL }}

      - name: 📢 Notify Staging Deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: "#deployments"
          text: |
            🚀 Staging Deployment Complete!
            Version: ${{ needs.build.outputs.build-version }}
            Hash: ${{ needs.build.outputs.build-hash }}
            URL: ${{ secrets.STAGING_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # 🏭 Production Deployment
  deploy-production:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production

    steps:
      - name: 📥 Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: production-build

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🔒 Pre-deployment Security Check
        run: pnpm security:check

      - name: 🚀 Deploy to Production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # Example: pnpm deploy:production
        env:
          NODE_ENV: production
          BUILD_VERSION: ${{ needs.build.outputs.build-version }}
          BUILD_HASH: ${{ needs.build.outputs.build-hash }}

      - name: 🧪 Run Production Smoke Tests
        run: pnpm test:smoke
        env:
          BASE_URL: ${{ secrets.PRODUCTION_URL }}

      - name: 📊 Run Production Performance Tests
        run: pnpm test:performance
        env:
          BASE_URL: ${{ secrets.PRODUCTION_URL }}

      - name: 📢 Notify Production Deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: "#deployments"
          text: |
            🏭 Production Deployment Complete!
            Version: ${{ needs.build.outputs.build-version }}
            Hash: ${{ needs.build.outputs.build-hash }}
            URL: ${{ secrets.PRODUCTION_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 🏷️ Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ needs.build.outputs.build-version }}
          body: |
            ## 🚀 Release ${{ needs.build.outputs.build-version }}

            ### 📋 Changes
            - See [CHANGELOG.md](./CHANGELOG.md) for detailed changes

            ### 🔧 Deployment Info
            - Build Hash: ${{ needs.build.outputs.build-hash }}
            - Environment: Production
            - Deployed: ${{ github.run_number }}

            ### 🧪 Testing
            - All tests passed ✅
            - Security scan completed ✅
            - Performance tests passed ✅
          draft: false
          prerelease: false

  # 📊 Post-deployment Monitoring
  monitor:
    name: 📊 Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')

    steps:
      - name: 📊 Setup Monitoring
        run: |
          echo "Setting up post-deployment monitoring..."
          # Add monitoring setup commands here

      - name: 📊 Health Check
        run: pnpm health:check
        env:
          BASE_URL: ${{ needs.deploy-production.result == 'success' && secrets.PRODUCTION_URL || secrets.STAGING_URL }}

      - name: 📊 Performance Monitoring
        run: pnpm monitor:performance
        env:
          BASE_URL: ${{ needs.deploy-production.result == 'success' && secrets.PRODUCTION_URL || secrets.STAGING_URL }}

      - name: 📊 Error Monitoring
        run: pnpm monitor:errors
        env:
          BASE_URL: ${{ needs.deploy-production.result == 'success' && secrets.PRODUCTION_URL || secrets.STAGING_URL }}
