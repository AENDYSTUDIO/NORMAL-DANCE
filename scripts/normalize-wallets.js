#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ wallet –∞–¥—Ä–µ—Å–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑-–∑–∞ —Ä–∞–∑–Ω–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞
 */

const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function normalizeWallets() {
  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é wallet –∞–¥—Ä–µ—Å–æ–≤...')

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å wallet –∞–¥—Ä–µ—Å–∞–º–∏
    const usersWithWallets = await prisma.user.findMany({
      where: {
        wallet: {
          not: null
        }
      },
      select: {
        id: true,
        wallet: true,
        email: true,
        username: true
      }
    })

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${usersWithWallets.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å wallet –∞–¥—Ä–µ—Å–∞–º–∏`)

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É wallet –∞–¥—Ä–µ—Å—É
    const walletGroups = new Map()

    for (const user of usersWithWallets) {
      if (!user.wallet) continue

      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º wallet –∞–¥—Ä–µ—Å (–ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É)
      const normalizedWallet = user.wallet.toLowerCase()

      if (!walletGroups.has(normalizedWallet)) {
        walletGroups.set(normalizedWallet, [])
      }

      walletGroups.get(normalizedWallet).push(user)
    }

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${walletGroups.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤`)

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    let processedCount = 0
    let mergedCount = 0

    for (const [normalizedWallet, users] of walletGroups) {
      if (users.length <= 1) continue

      console.log(`\nüîç –ù–∞–π–¥–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç –¥–ª—è –∞–¥—Ä–µ—Å–∞ ${normalizedWallet}:`)
      users.forEach((user, index) => {
        console.log(`  ${index + 1}. ${user.email} (${user.username}) - ID: ${user.id}`)
      })

      // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É–¥–∞–ª—è–µ–º
      const [keepUser, ...duplicateUsers] = users

      console.log(`‚úÖ –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${keepUser.email} (${keepUser.username})`)

      for (const duplicateUser of duplicateUsers) {
        console.log(`üóëÔ∏è  –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç: ${duplicateUser.email} (${duplicateUser.username})`)

        // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await prisma.user.delete({
          where: { id: duplicateUser.id }
        })

        mergedCount++
      }

      processedCount++
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ wallet –∞–¥—Ä–µ—Å–∞, –ø—Ä–∏–≤–æ–¥—è –∏—Ö –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    console.log('\nüîÑ –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä –≤—Å–µ—Ö wallet –∞–¥—Ä–µ—Å–æ–≤...')

    const updateResult = await prisma.user.updateMany({
      where: {
        wallet: {
          not: null
        }
      },
      data: {
        wallet: {
          // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É —á–µ—Ä–µ–∑ SQL
          set: prisma.$queryRaw`LOWER(wallet)`
        }
      }
    })

    console.log(`‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ ${updateResult.count} wallet –∞–¥—Ä–µ—Å–æ–≤`)

    console.log(`\nüéâ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`)
    console.log(`   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${processedCount}`)
    console.log(`   - –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${mergedCount}`)
    console.log(`   - –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ –∞–¥—Ä–µ—Å–æ–≤: ${updateResult.count}`)

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é
normalizeWallets()
  .then(() => {
    console.log('‚úÖ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ')
    process.exit(0)
  })
  .catch((error) => {
    console.error('‚ùå –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:', error)
    process.exit(1)
  })
