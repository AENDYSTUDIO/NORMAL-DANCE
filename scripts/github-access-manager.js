#!/usr/bin/env node

/**
 * GitHub Access Manager - –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SSH –∫–ª—é—á–∞–º–∏ –∏ MCP –¥–æ—Å—Ç—É–ø–æ–º
 * NORMALDANCE Enterprise Security System
 */

const crypto = require("crypto");
const fs = require("fs").promises;
const path = require("path");
const { execSync } = require("child_process");

class GitHubAccessManager {
  constructor() {
    this.sshDir = path.join(
      process.env.HOME || process.env.USERPROFILE,
      ".ssh"
    );
    this.keysDir = path.join(__dirname, "..", ".secure-keys");
    this.configFile = path.join(
      __dirname,
      "..",
      "config",
      "github-access.json"
    );
    this.auditLog = path.join(
      __dirname,
      "..",
      "logs",
      "github-access-audit.log"
    );
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
   */
  async initialize() {
    console.log("üîê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GitHub Access Manager...");

    try {
      // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—â–∏—â—ë–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
      await this.createSecureDirectories();

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª—é—á–µ–π
      await this.auditExistingKeys();

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      await this.setupSSHConfig();

      console.log("‚úÖ GitHub Access Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", error.message);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—â–∏—â—ë–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
   */
  async createSecureDirectories() {
    const dirs = [
      this.keysDir,
      path.join(this.keysDir, "active"),
      path.join(this.keysDir, "archived"),
      path.join(__dirname, "..", "logs"),
      path.join(__dirname, "..", "config"),
    ];

    for (const dir of dirs) {
      try {
        await fs.mkdir(dir, { recursive: true, mode: 0o700 });
        console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dir}`);
      } catch (error) {
        if (error.code !== "EEXIST") throw error;
      }
    }
  }

  /**
   * –ê—É–¥–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª—é—á–µ–π
   */
  async auditExistingKeys() {
    console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö SSH –∫–ª—é—á–µ–π...");

    try {
      const sshFiles = await fs.readdir(this.sshDir).catch(() => []);
      const keyFiles = sshFiles.filter(
        (file) =>
          file.endsWith(".pub") ||
          (file.startsWith("id_") && !file.includes("."))
      );

      if (keyFiles.length > 0) {
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${keyFiles.length} SSH –∫–ª—é—á–µ–π:`);
        keyFiles.forEach((file) => {
          console.log(`   - ${file}`);
        });
      } else {
        console.log("‚ö†Ô∏è  SSH –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
      }

      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏—Ç–∞
      await this.logAuditEvent("KEY_AUDIT", {
        keysFound: keyFiles.length,
        keyFiles: keyFiles,
      });
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∞—É–¥–∏—Ç–∞ –∫–ª—é—á–µ–π:", error.message);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ SSH –∫–ª—é—á–∞
   */
  async generateSSHKey(keyName = "normaldance-github", keyType = "ed25519") {
    console.log(`üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ SSH –∫–ª—é—á–∞: ${keyName}`);

    try {
      const keyPath = path.join(this.keysDir, "active", keyName);
      const publicKeyPath = `${keyPath}.pub`;

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞
      const command = `ssh-keygen -t ${keyType} -f "${keyPath}" -C "normaldance-github-${Date.now()}" -N ""`;
      execSync(command, { stdio: "inherit" });

      // –ß—Ç–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞
      const publicKey = await fs.readFile(publicKeyPath, "utf8");

      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
      await this.logAuditEvent("KEY_GENERATED", {
        keyName: keyName,
        keyType: keyType,
        keyPath: keyPath,
      });

      console.log("‚úÖ SSH –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω");
      console.log("üìã –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á:");
      console.log(publicKey);

      return {
        privateKeyPath: keyPath,
        publicKeyPath: publicKeyPath,
        publicKey: publicKey.trim(),
      };
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞:", error.message);
      throw error;
    }
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ SSH –∫–ª—é—á–∞ –≤ GitHub
   */
  async addKeyToGitHub(publicKey, title = "NORMALDANCE-Access") {
    console.log("üöÄ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ –≤ GitHub...");

    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ GitHub CLI
      try {
        execSync("gh --version", { stdio: "pipe" });
      } catch {
        throw new Error(
          "GitHub CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: https://cli.github.com/"
        );
      }

      // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ GitHub
      try {
        execSync("gh auth status", { stdio: "pipe" });
      } catch {
        console.log("üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ GitHub CLI...");
        execSync("gh auth login", { stdio: "inherit" });
      }

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞
      const command = `echo "${publicKey}" | gh ssh-key add - -t "${title}"`;
      execSync(command, { stdio: "inherit" });

      await this.logAuditEvent("KEY_ADDED_TO_GITHUB", {
        title: title,
        keyFingerprint: this.getKeyFingerprint(publicKey),
      });

      console.log("‚úÖ –ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ GitHub");
      return true;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞ –≤ GitHub:", error.message);
      throw error;
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  async setupSSHConfig() {
    const sshConfigPath = path.join(this.sshDir, "config");
    const configContent = `
# NORMALDANCE GitHub Access Configuration
Host github.com
    HostName github.com
    User git
    IdentityFile ${path.join(this.keysDir, "active", "normaldance-github")}
    IdentitiesOnly yes
    AddKeysToAgent yes
    UseKeychain yes

Host github-normaldance
    HostName github.com
    User git
    IdentityFile ${path.join(this.keysDir, "active", "normaldance-github")}
    IdentitiesOnly yes
    AddKeysToAgent yes
    UseKeychain yes
`;

    try {
      await fs.writeFile(sshConfigPath, configContent, { mode: 0o600 });
      console.log("‚úÖ SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SSH:", error.message);
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MCP –¥–ª—è GitHub
   */
  async setupMCPGitHub() {
    console.log("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MCP –¥–ª—è GitHub...");

    const mcpConfig = {
      mcpServers: {
        github: {
          command: "npx",
          args: ["-y", "@modelcontextprotocol/server-github"],
          env: {
            GITHUB_PERSONAL_ACCESS_TOKEN: process.env.GITHUB_TOKEN || "",
          },
        },
      },
    };

    const mcpConfigPath = path.join(
      process.env.HOME || process.env.USERPROFILE,
      ".config",
      "mcp",
      "config.json"
    );

    try {
      await fs.mkdir(path.dirname(mcpConfigPath), { recursive: true });
      await fs.writeFile(mcpConfigPath, JSON.stringify(mcpConfig, null, 2));

      console.log("‚úÖ MCP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞");
      console.log(
        "üìù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ GITHUB_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"
      );
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MCP:", error.message);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–ø–µ—á–∞—Ç–∫–∞ –∫–ª—é—á–∞
   */
  getKeyFingerprint(publicKey) {
    try {
      const keyData = publicKey.split(" ")[1];
      const keyBuffer = Buffer.from(keyData, "base64");
      const hash = crypto.createHash("sha256").update(keyBuffer).digest("hex");
      return `SHA256:${hash}`;
    } catch (error) {
      return "unknown";
    }
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∞—É–¥–∏—Ç–∞
   */
  async logAuditEvent(event, data) {
    const logEntry = {
      timestamp: new Date().toISOString(),
      event: event,
      data: data,
      user: process.env.USER || process.env.USERNAME || "unknown",
    };

    try {
      await fs.appendFile(this.auditLog, JSON.stringify(logEntry) + "\n");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:", error.message);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–ª—é—á–µ–π
   */
  async securityCheck() {
    console.log("üõ°Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...");

    const issues = [];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–ª—é—á–∞–º
    try {
      const keyFiles = await fs.readdir(path.join(this.keysDir, "active"));
      for (const file of keyFiles) {
        const filePath = path.join(this.keysDir, "active", file);
        const stats = await fs.stat(filePath);

        if (stats.mode & 0o077) {
          issues.push(`–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É: ${file}`);
        }
      }
    } catch (error) {
      issues.push(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞: ${error.message}`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫–ª—é—á–µ–π
    try {
      const archivedKeys = await fs.readdir(
        path.join(this.keysDir, "archived")
      );
      if (archivedKeys.length > 10) {
        issues.push("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞.");
      }
    } catch (error) {
      // –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
    }

    if (issues.length > 0) {
      console.log("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:");
      issues.forEach((issue) => console.log(`   - ${issue}`));
    } else {
      console.log("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–∞");
    }

    return issues;
  }

  /**
   * –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
   */
  async interactiveMenu() {
    const readline = require("readline");
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout,
    });

    const question = (prompt) =>
      new Promise((resolve) => rl.question(prompt, resolve));

    console.log("\nüéµ NORMALDANCE GitHub Access Manager");
    console.log("=====================================");
    console.log("1. –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π SSH –∫–ª—é—á");
    console.log("2. –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á –≤ GitHub");
    console.log("3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å MCP –¥–ª—è GitHub");
    console.log("4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å");
    console.log("5. –ü–æ–∫–∞–∑–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏");
    console.log("6. –í—ã—Ö–æ–¥");

    const choice = await question("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-6): ");

    switch (choice) {
      case "1":
        const keyName =
          (await question("–ò–º—è –∫–ª—é—á–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: normaldance-github): ")) ||
          "normaldance-github";
        const keyType =
          (await question(
            "–¢–∏–ø –∫–ª—é—á–∞ (ed25519/rsa, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ed25519): "
          )) || "ed25519";
        await this.generateSSHKey(keyName, keyType);
        break;

      case "2":
        const publicKey = await question("–í–≤–µ–¥–∏—Ç–µ –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á: ");
        const title =
          (await question("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ –≤ GitHub: ")) || "NORMALDANCE-Access";
        await this.addKeyToGitHub(publicKey, title);
        break;

      case "3":
        await this.setupMCPGitHub();
        break;

      case "4":
        await this.securityCheck();
        break;

      case "5":
        await this.auditExistingKeys();
        break;

      case "6":
        console.log("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!");
        break;

      default:
        console.log("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä");
    }

    rl.close();
  }
}

// –ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
if (require.main === module) {
  const manager = new GitHubAccessManager();

  manager
    .initialize()
    .then(() => manager.interactiveMenu())
    .catch((error) => {
      console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error.message);
      process.exit(1);
    });
}

module.exports = GitHubAccessManager;

