---
- name: Базовая настройка сервера для NORMALDANCE
  hosts: servers
  become: yes
  vars:
    app_user: "normaldance"
    app_dir: "/var/www/normaldance.ru"
    backup_dir: "/var/backups/normaldance"

  tasks:
    - name: Обновление системы
      apt:
        update: yes
        upgrade: dist
        cache_valid_time: 3600

    - name: Установка необходимых пакетов
      apt:
        name:
          - git
          - curl
          - wget
          - htop
          - unzip
          - nginx
          - python3-certbot-nginx
          - mariadb-server
          - php8.2-fpm
          - php8.2-mysql
          - php8.2-xml
          - php8.2-curl
          - fail2ban
          - ufw
        state: present

    - name: Установка Node.js 20
      shell: |
        curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
        apt-get install -y nodejs

    - name: Настройка swap-файла
      shell: |
        fallocate -l 2G /swapfile
        chmod 600 /swapfile
        mkswap /swapfile
        swapon /swapfile
        echo '/swapfile none swap sw 0 0' >> /etc/fstab

    - name: Настройка sysctl для производительности
      sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        state: present
        sysctl_set: yes
      with_items:
        - { key: "vm.swappiness", value: "10" }
        - { key: "vm.vfs_cache_pressure", value: "50" }
        - { key: "net.core.somaxconn", value: "65535" }
        - { key: "net.ipv4.tcp_max_syn_backlog", value: "65535" }
        - { key: "net.core.netdev_max_backlog", value: "65535" }

    - name: Настройка UFW файрвола
      ufw:
        state: enabled
        policy: deny
        rule: allow
        port: "{{ item }}"
      with_items:
        - "22/tcp"
        - "80/tcp"
        - "443/tcp"

    - name: Создание пользователя для приложения
      user:
        name: "{{ app_user }}"
        shell: /bin/bash
        create_home: yes
        groups: www-data

    - name: Настройка SSH для normaldance
      authorized_key:
        user: "{{ app_user }}"
        key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"

    - name: Отключение root SSH доступа
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^PermitRootLogin"
        line: "PermitRootLogin no"
        state: present
      notify: Restart SSH

    - name: Настройка Fail2Ban
      copy:
        dest: /etc/fail2ban/jail.local
        content: |
          [DEFAULT]
          bantime = 1h
          findtime = 10m
          maxretry = 5

          [sshd]
          enabled = true
          port = 22
          filter = sshd
          logpath = /var/log/auth.log
          maxretry = 3
          bantime = 1h

          [nginx-http-auth]
          enabled = true
          filter = nginx-http-auth
          port = http,https
          logpath = /var/log/nginx/error.log

          [nginx-limit-req]
          enabled = true
          filter = nginx-limit-req
          port = http,https
          logpath = /var/log/nginx/error.log
      notify: Restart Fail2Ban

    - name: Создание директорий для приложения
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: "0755"
      with_items:
        - "{{ app_dir }}"
        - "{{ backup_dir }}"
        - "{{ app_dir }}/.next"
        - "{{ app_dir }}/prisma"

    - name: Настройка виртуального хоста Nginx
      copy:
        dest: /etc/nginx/sites-available/normaldance.ru
        content: |
          server {
              listen 80;
              server_name normaldance.ru www.normaldance.ru;
              
              root {{ app_dir }};
              index index.html;
              
              # Security headers
              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-Content-Type-Options "nosniff" always;
              add_header X-XSS-Protection "1; mode=block" always;
              add_header Referrer-Policy "strict-origin-when-cross-origin" always;
              add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-eval' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; connect-src 'self' https: wss:; font-src 'self' data:; frame-ancestors 'none';" always;
              
              location / {
                  proxy_pass http://localhost:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
                  proxy_cache_bypass \$http_upgrade;
                  
                  # Timeouts
                  proxy_connect_timeout 60s;
                  proxy_send_timeout 60s;
                  proxy_read_timeout 60s;
              }
              
              # Статические файлы
              location /_next/static/ {
                  alias {{ app_dir }}/.next/static/;
                  expires 1y;
                  add_header Cache-Control "public, immutable";
                  access_log off;
              }
              
              # WebSocket
              location /api/socketio/ {
                  proxy_pass http://localhost:3000/api/socketio/;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection "upgrade";
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
                  
                  # Timeouts
                  proxy_connect_timeout 60s;
                  proxy_send_timeout 86400s;
                  proxy_read_timeout 86400s;
              }
              
              # Health check
              location /health {
                  access_log off;
                  return 200 "healthy\n";
                  add_header Content-Type text/plain;
              }
          }
      notify: Restart Nginx

    - name: Включение виртуального хоста
      file:
        src: /etc/nginx/sites-available/normaldance.ru
        dest: /etc/nginx/sites-enabled/normaldance.ru
        state: link

    - name: Удаление дефолтного виртуального хоста
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify: Restart Nginx

    - name: Настройка gzip сжатия
      copy:
        dest: /etc/nginx/conf.d/gzip.conf
        content: |
          gzip on;
          gzip_vary on;
          gzip_min_length 1024;
          gzip_proxied any;
          gzip_comp_level 6;
          gzip_types
              text/plain
              text/css
              text/xml
              text/javascript
              application/javascript
              application/xml+rss
              application/json
              application/xml
              image/svg+xml;
        notify: Restart Nginx

    - name: Настройка кэширования
      copy:
        dest: /etc/nginx/conf.d/cache.conf
        content: |
          open_file_cache max=1000 inactive=20s;
          open_file_cache_valid 30s;
          open_file_cache_min_uses 2;
          open_file_cache_errors on;
          open_file_cache_path /var/cache/nginx levels=1:2 keys_zone=nginx_cache:10m inactive=60m;
          server_names_hash_bucket_size 128;
          server_names_hash_max_size 1024;
        notify: Restart Nginx

    - name: Создание systemd сервиса для Next.js
      copy:
        dest: /etc/systemd/system/normaldance.service
        content: |
          [Unit]
          Description=NormalDance Next.js Application
          After=network.target
          Wants=network.target

          [Service]
          Type=simple
          User={{ app_user }}
          Group={{ app_user }}
          WorkingDirectory={{ app_dir }}
          Environment=NODE_ENV=production
          Environment=PORT=3000
          Environment=HOSTNAME=0.0.0.0
          ExecStart=/usr/bin/node server.js
          Restart=always
          RestartSec=10
          StandardOutput=journal
          StandardError=journal

          # Security settings
          NoNewPrivileges=true
          PrivateTmp=true
          ProtectHome=true
          ProtectSystem=strict
          ReadWritePaths={{ app_dir }}

          [Install]
          WantedBy=multi-user.target
      notify: Reload systemd

    - name: Создание скрипта резервного копирования
      copy:
        dest: /usr/local/bin/backup-normaldance.sh
        mode: "0755"
        content: |
          #!/bin/bash
          DATE=\$(date +%Y%m%d_%H%M%S)
          BACKUP_DIR="{{ backup_dir }}"
          APP_DIR="{{ app_dir }}"

          mkdir -p \$BACKUP_DIR

          # База данных
          if [ -f "\$APP_DIR/prisma/db/custom.db" ]; then
              cp \$APP_DIR/prisma/db/custom.db \$BACKUP_DIR/normaldance_db_\$DATE.db
          fi

          # Код приложения
          tar -czf \$BACKUP_DIR/normaldance_code_\$DATE.tar.gz -C \$APP_DIR --exclude=node_modules --exclude=.next .

          # Удаление старых бэкапов (остаются последние 7)
          find \$BACKUP_DIR -name "*.db" -mtime +7 -delete
          find \$BACKUP_DIR -name "*.tar.gz" -mtime +7 -delete

          echo "Backup completed: \$DATE"

          # Сжатие старых бэкапов
          find \$BACKUP_DIR -name "*.db" -mtime +1 -exec gzip {} \;
          find \$BACKUP_DIR -name "*.tar.gz" -mtime +30 -exec gzip {} \;

  handlers:
    - name: Restart SSH
      service:
        name: sshd
        state: restarted

    - name: Restart Fail2Ban
      service:
        name: fail2ban
        state: restarted

    - name: Restart Nginx
      service:
        name: nginx
        state: restarted

    - name: Reload systemd
      systemd:
        daemon_reload: yes
