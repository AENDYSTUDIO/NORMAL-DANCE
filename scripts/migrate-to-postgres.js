#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ —Å SQLite –Ω–∞ PostgreSQL
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É –±–∞–∑–∞–º–∏
 */

const { PrismaClient: SQLiteClient } = require('@prisma/client')
const { PrismaClient: PostgresClient } = require('@prisma/client')

async function migrateDatabase() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å SQLite –Ω–∞ PostgreSQL...')

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const sqliteUrl = process.env.DATABASE_URL_SQLITE || 'file:./dev.db'
  const postgresUrl = process.env.DATABASE_URL

  if (!postgresUrl || !postgresUrl.startsWith('postgresql://')) {
    console.error('‚ùå DATABASE_URL –¥–ª—è PostgreSQL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
    console.log('üí° –î–æ–±–∞–≤—å—Ç–µ –≤ .env:')
    console.log('   DATABASE_URL="postgresql://user:password@host:port/database"')
    process.exit(1)
  }

  console.log(`üì¶ –ò—Å—Ö–æ–¥–Ω–∞—è –ë–î: ${sqliteUrl}`)
  console.log(`üéØ –¶–µ–ª–µ–≤–∞—è –ë–î: ${postgresUrl.replace(/:[^:]+@/, ':***@')}`)

  let sqliteClient, postgresClient

  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –æ–±–µ–∏–º –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
    sqliteClient = new SQLiteClient({
      datasourceUrl: sqliteUrl
    })

    postgresClient = new PostgresClient({
      datasourceUrl: postgresUrl
    })

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    await sqliteClient.$connect()
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')

    await postgresClient.$connect()
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ SQLite
    console.log('\nüìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ SQLite...')

    const userCount = await sqliteClient.user.count()
    const trackCount = await sqliteClient.track.count()
    const nftCount = await sqliteClient.nft.count()
    const stakeCount = await sqliteClient.stake.count()

    console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userCount}`)
    console.log(`   –¢—Ä–µ–∫–æ–≤: ${trackCount}`)
    console.log(`   NFT: ${nftCount}`)
    console.log(`   –°—Ç–µ–π–∫–æ–≤: ${stakeCount}`)

    if (userCount === 0 && trackCount === 0) {
      console.log('‚ö†Ô∏è  –ò—Å—Ö–æ–¥–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞, –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è')
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–ª–µ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞
    const existingUsers = await postgresClient.user.count()

    if (existingUsers > 0) {
      console.log('‚ö†Ô∏è  –¶–µ–ª–µ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø—É—Å—Ç–∞!')
      console.log('   –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:')
      console.log('   1. –û—á–∏—Å—Ç–∏—Ç—å —Ü–µ–ª–µ–≤—É—é –±–∞–∑—É (npm run db:reset)')
      console.log('   2. –î–æ–±–∞–≤–∏—Ç—å —Ñ–ª–∞–≥ --force –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏')
      console.log('   3. –û—Ç–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é')

      const force = process.argv.includes('--force')
      if (!force) {
        console.log('\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö')
        return
      }

      console.log('‚ö†Ô∏è  –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è - —Ü–µ–ª–µ–≤–∞—è –±–∞–∑–∞ –±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω–∞!')
    }

    // –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    console.log('\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö...')

    // 1. –ü–µ—Ä–µ–Ω–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (userCount > 0) {
      console.log('üë• –ü–µ—Ä–µ–Ω–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...')

      const users = await sqliteClient.user.findMany({
        include: {
          tracks: true,
          likes: true,
          follows: true,
          stakes: true
        }
      })

      for (const user of users) {
        try {
          await postgresClient.user.create({
            data: {
              id: user.id,
              email: user.email,
              username: user.username,
              displayName: user.displayName,
              bio: user.bio,
              avatar: user.avatar,
              banner: user.banner,
              wallet: user.wallet,
              level: user.level,
              balance: user.balance,
              tonBalance: user.tonBalance,
              isArtist: user.isArtist,
              isActive: user.isActive,
              role: user.role,
              createdAt: user.createdAt,
              updatedAt: user.updatedAt,
              // –°–≤—è–∑–∏ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
            }
          })
        } catch (error) {
          if (error.code === 'P2002') {
            console.log(`   –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.email}`)
          } else {
            console.error(`   –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.email}:`, error.message)
          }
        }
      }

      console.log(`‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`)
    }

    // 2. –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ç—Ä–µ–∫–∏
    if (trackCount > 0) {
      console.log('üéµ –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ç—Ä–µ–∫–∏...')

      const tracks = await sqliteClient.track.findMany({
        include: {
          likes: true,
          nfts: true
        }
      })

      for (const track of tracks) {
        try {
          await postgresClient.track.create({
            data: {
              id: track.id,
              title: track.title,
              artistName: track.artistName,
              genre: track.genre,
              duration: track.duration,
              playCount: track.playCount,
              likeCount: track.likeCount,
              ipfsHash: track.ipfsHash,
              metadata: track.metadata,
              price: track.price,
              isExplicit: track.isExplicit,
              isPublished: track.isPublished,
              status: track.status,
              publishedAt: track.publishedAt,
              createdAt: track.createdAt,
              updatedAt: track.updatedAt,
              artistId: track.artistId,
              // –°–≤—è–∑–∏ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            }
          })
        } catch (error) {
          if (error.code === 'P2003') {
            console.log(`   –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–∫ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞: ${track.title}`)
          } else {
            console.error(`   –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ —Ç—Ä–µ–∫–∞ ${track.title}:`, error.message)
          }
        }
      }

      console.log(`‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤: ${tracks.length}`)
    }

    // 3. –ü–µ—Ä–µ–Ω–æ—Å–∏–º NFT
    if (nftCount > 0) {
      console.log('üñºÔ∏è  –ü–µ—Ä–µ–Ω–æ—Å–∏–º NFT...')

      const nfts = await sqliteClient.nft.findMany()

      for (const nft of nfts) {
        try {
          await postgresClient.nft.create({
            data: {
              id: nft.id,
              tokenId: nft.tokenId,
              name: nft.name,
              description: nft.description,
              imageUrl: nft.imageUrl,
              metadata: nft.metadata,
              price: nft.price,
              status: nft.status,
              type: nft.type,
              createdAt: nft.createdAt,
              updatedAt: nft.updatedAt,
              ownerId: nft.ownerId,
              trackId: nft.trackId
            }
          })
        } catch (error) {
          console.error(`   –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ NFT ${nft.name}:`, error.message)
        }
      }

      console.log(`‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ NFT: ${nfts.length}`)
    }

    // 4. –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Å—Ç–µ–π–∫–∏
    if (stakeCount > 0) {
      console.log('üí∞ –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Å—Ç–µ–π–∫–∏...')

      const stakes = await sqliteClient.stake.findMany()

      for (const stake of stakes) {
        try {
          await postgresClient.stake.create({
            data: {
              id: stake.id,
              amount: stake.amount,
              rewardRate: stake.rewardRate,
              earned: stake.earned,
              status: stake.status,
              startDate: stake.startDate,
              endDate: stake.endDate,
              createdAt: stake.createdAt,
              updatedAt: stake.updatedAt,
              userId: stake.userId,
              tokenId: stake.tokenId
            }
          })
        } catch (error) {
          console.error(`   –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ —Å—Ç–µ–π–∫–∞ ${stake.id}:`, error.message)
        }
      }

      console.log(`‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ —Å—Ç–µ–π–∫–æ–≤: ${stakes.length}`)
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìà –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')

    const finalUserCount = await postgresClient.user.count()
    const finalTrackCount = await postgresClient.track.count()
    const finalNftCount = await postgresClient.nft.count()
    const finalStakeCount = await postgresClient.stake.count()

    console.log(`   PostgreSQL –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${finalUserCount}`)
    console.log(`   PostgreSQL —Ç—Ä–µ–∫–∏: ${finalTrackCount}`)
    console.log(`   PostgreSQL NFT: ${finalNftCount}`)
    console.log(`   PostgreSQL —Å—Ç–µ–π–∫–∏: ${finalStakeCount}`)

    console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')

    // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —à–∞–≥–∞–º
    console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:')
    console.log('1. –û–±–Ω–æ–≤–∏—Ç–µ DATABASE_URL –≤ .env –Ω–∞ PostgreSQL')
    console.log('2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: npm run db:generate')
    console.log('3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: npm run db:push')
    console.log('4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node scripts/normalize-wallets.js')
    console.log('5. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ API —Å–µ—Ä–≤–µ—Ä')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error)
    throw error
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if (sqliteClient) await sqliteClient.$disconnect()
    if (postgresClient) await postgresClient.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
migrateDatabase()
  .then(() => {
    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ')
    process.exit(0)
  })
  .catch((error) => {
    console.error('‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π:', error)
    process.exit(1)
  })
