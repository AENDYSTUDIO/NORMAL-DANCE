# NORMALDANCE Git Configuration Cleaner
# –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö Git –∏ GitHub –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π

param(
    [switch]$Force,
    [string]$NewUserName = "",
    [string]$NewUserEmail = ""
)

Write-Host "üßπ NORMALDANCE Git Configuration Cleaner" -ForegroundColor Cyan
Write-Host "=========================================" -ForegroundColor Cyan
Write-Host ""

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
$Red = "Red"
$Green = "Green"
$Yellow = "Yellow"
$Cyan = "Cyan"

function Write-ColorLog {
    param(
        [string]$Message,
        [string]$Type = "Info"
    )
    
    switch ($Type) {
        "Error" { Write-Host "‚ùå $Message" -ForegroundColor $Red }
        "Warning" { Write-Host "‚ö†Ô∏è  $Message" -ForegroundColor $Yellow }
        "Success" { Write-Host "‚úÖ $Message" -ForegroundColor $Green }
        "Info" { Write-Host "‚ÑπÔ∏è  $Message" -ForegroundColor $Cyan }
        default { Write-Host $Message }
    }
}

function Show-CurrentConfig {
    Write-ColorLog "–¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Git:" "Info"
    Write-Host ""
    
    # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    Write-Host "üåê –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:" -ForegroundColor Yellow
    try {
        git config --global --list | ForEach-Object { Write-Host "   $_" }
    } catch {
        Write-ColorLog "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏" "Error"
    }
    
    Write-Host ""
    
    # –õ–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    Write-Host "üìÅ –õ–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:" -ForegroundColor Yellow
    try {
        git config --local --list | ForEach-Object { Write-Host "   $_" }
    } catch {
        Write-ColorLog "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏" "Error"
    }
    
    Write-Host ""
}

function Show-SSHKeys {
    Write-ColorLog "SSH –∫–ª—é—á–∏:" "Info"
    Write-Host ""
    
    $sshDir = "$env:USERPROFILE\.ssh"
    if (Test-Path $sshDir) {
        Write-Host "üìÅ SSH –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $sshDir" -ForegroundColor Yellow
        Get-ChildItem -Path $sshDir -Force | ForEach-Object {
            $icon = if ($_.PSIsContainer) { "üìÅ" } else { "üìÑ" }
            Write-Host "   $icon $($_.Name) ($($_.Length) bytes)" -ForegroundColor White
        }
    } else {
        Write-ColorLog "SSH –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" "Warning"
    }
    
    Write-Host ""
}

function Show-GitHubDesktopConfig {
    Write-ColorLog "GitHub Desktop –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:" "Info"
    Write-Host ""
    
    $githubDesktopDir = "$env:APPDATA\GitHubDesktop"
    if (Test-Path $githubDesktopDir) {
        Write-Host "üìÅ GitHub Desktop –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $githubDesktopDir" -ForegroundColor Yellow
        Get-ChildItem -Path $githubDesktopDir -Force | ForEach-Object {
            $icon = if ($_.PSIsContainer) { "üìÅ" } else { "üìÑ" }
            Write-Host "   $icon $($_.Name)" -ForegroundColor White
        }
    } else {
        Write-ColorLog "GitHub Desktop –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" "Warning"
    }
    
    Write-Host ""
}

function Clear-GlobalGitConfig {
    Write-ColorLog "–û—á–∏—Å—Ç–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Git..." "Info"
    
    try {
        # –£–¥–∞–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        git config --global --unset user.name
        git config --global --unset user.email
        git config --global --unset credential.helper
        git config --global --unset credential.https://github.com.username
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        $configKeys = git config --global --list | ForEach-Object { $_.Split('=')[0] }
        foreach ($key in $configKeys) {
            git config --global --unset $key
        }
        
        Write-ColorLog "–ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Git –æ—á–∏—â–µ–Ω–∞" "Success"
    } catch {
        Write-ColorLog "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: $($_.Exception.Message)" "Error"
    }
}

function Clear-LocalGitConfig {
    Write-ColorLog "–û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Git..." "Info"
    
    try {
        # –£–¥–∞–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        git config --local --unset user.name
        git config --local --unset user.email
        git config --local --unset credential.helper
        
        Write-ColorLog "–õ–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Git –æ—á–∏—â–µ–Ω–∞" "Success"
    } catch {
        Write-ColorLog "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: $($_.Exception.Message)" "Error"
    }
}

function Clear-SSHKeys {
    Write-ColorLog "–û—á–∏—Å—Ç–∫–∞ SSH –∫–ª—é—á–µ–π..." "Info"
    
    $sshDir = "$env:USERPROFILE\.ssh"
    if (Test-Path $sshDir) {
        try {
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            $backupDir = "$sshDir\backup-$(Get-Date -Format 'yyyyMMdd-HHmmss')"
            New-Item -ItemType Directory -Path $backupDir -Force | Out-Null
            
            # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            Get-ChildItem -Path $sshDir -File | ForEach-Object {
                Copy-Item $_.FullName -Destination $backupDir
            }
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∫—Ä–æ–º–µ backup
            Get-ChildItem -Path $sshDir -File | Remove-Item -Force
            Get-ChildItem -Path $sshDir -Directory | Where-Object { $_.Name -notlike "backup-*" } | Remove-Item -Recurse -Force
            
            Write-ColorLog "SSH –∫–ª—é—á–∏ –æ—á–∏—â–µ–Ω—ã (—Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: $backupDir)" "Success"
        } catch {
            Write-ColorLog "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ SSH –∫–ª—é—á–µ–π: $($_.Exception.Message)" "Error"
        }
    } else {
        Write-ColorLog "SSH –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" "Warning"
    }
}

function Clear-GitHubDesktopConfig {
    Write-ColorLog "–û—á–∏—Å—Ç–∫–∞ GitHub Desktop –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..." "Info"
    
    $githubDesktopDir = "$env:APPDATA\GitHubDesktop"
    if (Test-Path $githubDesktopDir) {
        try {
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            $backupDir = "$githubDesktopDir-backup-$(Get-Date -Format 'yyyyMMdd-HHmmss')"
            Copy-Item -Path $githubDesktopDir -Destination $backupDir -Recurse -Force
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            Remove-Item -Path $githubDesktopDir -Recurse -Force
            
            Write-ColorLog "GitHub Desktop –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—á–∏—â–µ–Ω–∞ (—Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: $backupDir)" "Success"
        } catch {
            Write-ColorLog "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ GitHub Desktop: $($_.Exception.Message)" "Error"
        }
    } else {
        Write-ColorLog "GitHub Desktop –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" "Warning"
    }
}

function Clear-GitCredentials {
    Write-ColorLog "–û—á–∏—Å—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —É—á—ë—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö..." "Info"
    
    try {
        # –û—á–∏—Å—Ç–∫–∞ Windows Credential Manager
        cmdkey /list | ForEach-Object {
            if ($_ -match "git:https://github.com") {
                $target = $_.Split(':')[1].Trim()
                cmdkey /delete:$target
                Write-Host "   –£–¥–∞–ª—ë–Ω: $target" -ForegroundColor White
            }
        }
        
        Write-ColorLog "–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã" "Success"
    } catch {
        Write-ColorLog "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —É—á—ë—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: $($_.Exception.Message)" "Error"
    }
}

function Set-NewGitConfig {
    param(
        [string]$UserName,
        [string]$UserEmail
    )
    
    if ([string]::IsNullOrEmpty($UserName) -or [string]::IsNullOrEmpty($UserEmail)) {
        Write-ColorLog "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Git..." "Info"
        
        $UserName = Read-Host "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        $UserEmail = Read-Host "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email"
    }
    
    try {
        git config --global user.name $UserName
        git config --global user.email $UserEmail
        
        Write-ColorLog "–ù–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Git —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:" "Success"
        Write-Host "   –ò–º—è: $UserName" -ForegroundColor White
        Write-Host "   Email: $UserEmail" -ForegroundColor White
    } catch {
        Write-ColorLog "–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: $($_.Exception.Message)" "Error"
    }
}

function Show-Menu {
    Write-Host ""
    Write-Host "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" -ForegroundColor Magenta
    Write-Host "1. –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
    Write-Host "2. –û—á–∏—Å—Ç–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Git"
    Write-Host "3. –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Git"
    Write-Host "4. –û—á–∏—Å—Ç–∏—Ç—å SSH –∫–ª—é—á–∏"
    Write-Host "5. –û—á–∏—Å—Ç–∏—Ç—å GitHub Desktop –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
    Write-Host "6. –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
    Write-Host "7. –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (–≤—Å–µ –ø—É–Ω–∫—Ç—ã)"
    Write-Host "8. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç Git"
    Write-Host "9. –í—ã—Ö–æ–¥"
    Write-Host ""
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
Write-ColorLog "–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..." "Info"

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
Show-CurrentConfig
Show-SSHKeys
Show-GitHubDesktopConfig

if ($Force) {
    Write-ColorLog "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π..." "Warning"
    
    Clear-GlobalGitConfig
    Clear-LocalGitConfig
    Clear-SSHKeys
    Clear-GitHubDesktopConfig
    Clear-GitCredentials
    
    if (![string]::IsNullOrEmpty($NewUserName) -and ![string]::IsNullOrEmpty($NewUserEmail)) {
        Set-NewGitConfig -UserName $NewUserName -UserEmail $NewUserEmail
    }
    
    Write-ColorLog "–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" "Success"
} else {
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
    do {
        Show-Menu
        $choice = Read-Host "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-9)"
        
        switch ($choice) {
            "1" {
                Show-CurrentConfig
                Show-SSHKeys
                Show-GitHubDesktopConfig
            }
            "2" {
                $confirm = Read-Host "–û—á–∏—Å—Ç–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Git? (y/N)"
                if ($confirm -eq "y" -or $confirm -eq "Y") {
                    Clear-GlobalGitConfig
                }
            }
            "3" {
                $confirm = Read-Host "–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Git? (y/N)"
                if ($confirm -eq "y" -or $confirm -eq "Y") {
                    Clear-LocalGitConfig
                }
            }
            "4" {
                $confirm = Read-Host "–û—á–∏—Å—Ç–∏—Ç—å SSH –∫–ª—é—á–∏? (y/N)"
                if ($confirm -eq "y" -or $confirm -eq "Y") {
                    Clear-SSHKeys
                }
            }
            "5" {
                $confirm = Read-Host "–û—á–∏—Å—Ç–∏—Ç—å GitHub Desktop –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é? (y/N)"
                if ($confirm -eq "y" -or $confirm -eq "Y") {
                    Clear-GitHubDesktopConfig
                }
            }
            "6" {
                $confirm = Read-Host "–û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ? (y/N)"
                if ($confirm -eq "y" -or $confirm -eq "Y") {
                    Clear-GitCredentials
                }
            }
            "7" {
                $confirm = Read-Host "–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É? (y/N)"
                if ($confirm -eq "y" -or $confirm -eq "Y") {
                    Clear-GlobalGitConfig
                    Clear-LocalGitConfig
                    Clear-SSHKeys
                    Clear-GitHubDesktopConfig
                    Clear-GitCredentials
                    Write-ColorLog "–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" "Success"
                }
            }
            "8" {
                Set-NewGitConfig
            }
            "9" {
                Write-ColorLog "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!" "Success"
                break
            }
            default {
                Write-ColorLog "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä" "Error"
            }
        }
        
        if ($choice -ne "9") {
            Write-Host ""
            Read-Host "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è"
        }
        
    } while ($choice -ne "9")
}

Write-Host ""
Write-ColorLog "–û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" "Success"

