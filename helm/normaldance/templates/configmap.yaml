apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "normaldance.configMapName" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "normaldance.labels" . | nindent 4 }}
data:
  app-config.json: |
    {
      "app": {
        "name": "NormalDance",
        "version": "{{ .Chart.AppVersion }}",
        "environment": "{{ .Values.environment }}",
        "debug": {{ .Values.debug | toString }},
        "port": {{ .Values.service.port }},
        "host": "{{ .Values.host }}"
      },
      "database": {
        "provider": "{{ .Values.database.provider }}",
        "url": "{{ .Values.database.url }}",
        "pool": {
          "min": {{ .Values.database.pool.min }},
          "max": {{ .Values.database.pool.max }}
        }
      },
      "redis": {
        "url": "{{ .Values.redis.url }}",
        "prefix": "{{ .Values.redis.prefix }}"
      },
      "auth": {
        "jwt": {
          "secret": "{{ .Values.auth.jwt.secret }}",
          "expiresIn": "{{ .Values.auth.jwt.expiresIn }}",
          "refreshExpiresIn": "{{ .Values.auth.jwt.refreshExpiresIn }}"
        },
        "providers": [
          {{- range .Values.auth.providers }}
          {
            "name": "{{ .name }}",
            "enabled": {{ .enabled }},
            "clientId": "{{ .clientId }}",
            "clientSecret": "{{ .clientSecret }}"
          }
          {{- if not @last }},{{- end }}
          {{- end }}
        ]
      },
      "upload": {
        "maxFileSize": {{ .Values.upload.maxFileSize }},
        "allowedTypes": {{ .Values.upload.allowedTypes | toJson }},
        "storage": {
          "provider": "{{ .Values.upload.storage.provider }}",
          "bucket": "{{ .Values.upload.storage.bucket }}",
          "region": "{{ .Values.upload.storage.region }}"
        }
      },
      "ipfs": {
        "gateway": "{{ .Values.ipfs.gateway }}",
        "api": {
          "url": "{{ .Values.ipfs.api.url }}",
          "timeout": {{ .Values.ipfs.api.timeout }}
        }
      },
      "filecoin": {
        "api": {
          "url": "{{ .Values.filecoin.api.url }}",
          "timeout": {{ .Values.filecoin.api.timeout }}
        }
      },
      "solana": {
        "network": "{{ .Values.solana.network }}",
        "rpcUrl": "{{ .Values.solana.rpcUrl }}",
        "programs": {
          "ndt": "{{ .Values.solana.programs.ndt }}",
          "tracknft": "{{ .Values.solana.programs.tracknft }}",
          "staking": "{{ .Values.solana.programs.staking }}"
        }
      },
      "stripe": {
        "publishableKey": "{{ .Values.stripe.publishableKey }}",
        "webhookSecret": "{{ .Values.stripe.webhookSecret }}"
      },
      "email": {
        "provider": "{{ .Values.email.provider }}",
        "smtp": {
          "host": "{{ .Values.email.smtp.host }}",
          "port": {{ .Values.email.smtp.port }},
          "secure": {{ .Values.email.smtp.secure | toString }},
          "auth": {
            "user": "{{ .Values.email.smtp.auth.user }}",
            "pass": "{{ .Values.email.smtp.auth.pass }}"
          }
        }
      },
      "analytics": {
        "provider": "{{ .Values.analytics.provider }}",
        "trackingId": "{{ .Values.analytics.trackingId }}",
        "enabled": {{ .Values.analytics.enabled | toString }}
      },
      "websocket": {
        "enabled": {{ .Values.websocket.enabled | toString }},
        "path": "{{ .Values.websocket.path }}",
        "port": {{ .Values.websocket.port }}
      },
      "cache": {
        "enabled": {{ .Values.cache.enabled | toString }},
        "ttl": {{ .Values.cache.ttl }}
      },
      "security": {
        "cors": {
          "enabled": {{ .Values.security.cors.enabled | toString }},
          "origins": {{ .Values.security.cors.origins | toJson }}
        },
        "rateLimit": {
          "enabled": {{ .Values.security.rateLimit.enabled | toString }},
          "windowMs": {{ .Values.security.rateLimit.windowMs }},
          "max": {{ .Values.security.rateLimit.max }}
        },
        "csrf": {
          "enabled": {{ .Values.security.csrf.enabled | toString }}
        }
      },
      "monitoring": {
        "enabled": {{ .Values.monitoring.enabled | toString }},
        "metrics": {
          "enabled": {{ .Values.monitoring.metrics.enabled | toString }},
          "tracing": {{ .Values.monitoring.tracing.enabled | toString }}
        }
      },
      "features": {
        "nft": {{ .Values.features.nft | toString }},
        "staking": {{ .Values.features.staking | toString }},
        "rewards": {{ .Values.features.rewards | toString }},
        "playlists": {{ .Values.features.playlists | toString }},
        "social": {{ .Values.features.social | toString }}
      },
      "ui": {
        "theme": "{{ .Values.ui.theme }}",
        "language": "{{ .Values.ui.language }}",
        "currency": "{{ .Values.ui.currency }}"
      },
      "cdn": {
        "url": "{{ .Values.cdn.url }}",
        "enabled": {{ .Values.cdn.enabled | toString }}
      },
      "search": {
        "provider": "{{ .Values.search.provider }}",
        "enabled": {{ .Values.search.enabled | toString }}
      },
      "translation": {
        "provider": "{{ .Values.translation.provider }}",
        "enabled": {{ .Values.translation.enabled | toString }}
      },
      "video": {
        "transcoding": {
          "enabled": {{ .Values.video.transcoding.enabled | toString }},
          "provider": "{{ .Values.video.transcoding.provider }}"
        }
      },
      "audio": {
        "processing": {
          "enabled": {{ .Values.audio.processing.enabled | toString }},
          "provider": "{{ .Values.audio.processing.provider }}"
        }
      },
      "push": {
        "notification": {
          "enabled": {{ .Values.push.notification.enabled | toString }},
          "provider": "{{ .Values.push.notification.provider }}"
        }
      },
      "backup": {
        "enabled": {{ .Values.backup.enabled | toString }},
        "schedule": "{{ .Values.backup.schedule }}"
      },
      "logging": {
        "level": "{{ .Values.logging.level }}",
        "format": "{{ .Values.logging.format }}"
      }
    }
  nginx.conf: |
    worker_processes auto;
    error_log /var/log/nginx/error.log notice;
    pid /var/run/nginx.pid;

    events {
        worker_connections 1024;
        use epoll;
        multi_accept on;
    }

    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';

        access_log /var/log/nginx/access.log main;

        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;

        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_comp_level 6;
        gzip_types text/plain text/css text/xml text/javascript
                   application/json application/javascript application/xml+rss
                   application/atom+xml image/svg+xml;

        server {
            listen 80;
            server_name {{ .Values.host }};
            root /usr/share/nginx/html;
            index index.html index.htm;

            location / {
                try_files $uri $uri/ /index.html;
            }

            location /api/ {
                proxy_pass http://backend:{{ .Values.service.targetPort }};
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

            location /socket.io/ {
                proxy_pass http://backend:{{ .Values.websocket.port }};
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

            location /static/ {
                expires 1y;
                add_header Cache-Control "public, immutable";
            }

            location /assets/ {
                expires 1y;
                add_header Cache-Control "public, immutable";
            }

            error_page 500 502 503 504 /50x.html;
            location = /50x.html {
                root /usr/share/nginx/html;
            }
        }
    }
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s

    scrape_configs:
      - job_name: 'normaldance'
        static_configs:
          - targets: ['normaldance:{{ .Values.service.port }}']
        metrics_path: '/metrics'
        scrape_interval: 15s
        scrape_timeout: 10s

      - job_name: 'nginx'
        static_configs:
          - targets: ['nginx:80']
        metrics_path: '/metrics'
        scrape_interval: 15s
        scrape_timeout: 10s
  grafana/dashboards/dashboard.json: |
    {
      "dashboard": {
        "id": null,
        "title": "NormalDance Metrics",
        "tags": ["normaldance"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "HTTP Requests",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(http_requests_total[5m])",
                "legendFormat": "{{method}} {{status}}"
              }
            ]
          },
          {
            "id": 2,
            "title": "Response Time",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m]))",
                "legendFormat": "95th percentile"
              }
            ]
          },
          {
            "id": 3,
            "title": "Active Users",
            "type": "singlestat",
            "targets": [
              {
                "expr": "active_users",
                "legendFormat": "Active Users"
              }
            ]
          }
        ]
      }
    }
  loki-config.yaml: |
    auth_enabled: false

    server:
      http_listen_port: 3100
      grpc_listen_port: 9096

    common:
      storage:
        filesystem:
          chunks_directory: /loki/chunks
          rules_directory: /loki/rules

      replication_factor: 1
      ring:
        instance_addr: 127.0.0.1
        kvstore:
          store: memberlist

      query:
        max_concurrent: 8192

    schema_config:
      configs:
        - from_date: 2020-10-24
          store: boltdb-shipper
          object_store: filesystem
          schema: v11
          index:
            prefix: index_
            period: 24h

    ruler:
      alertmanager_url: http://localhost:9093

      storage:
        type: local
        local:
          directory: /loki/rules

      rule_path: /loki/rules
      alertmanager_url: http://localhost:9093
      evaluation_interval: 1m

    # By default, Loki will send anonymous usage information to Grafana Labs.
    # To disable this, set analytics.reporting_enabled to false.
    analytics:
      reporting_enabled: false
  jaeger-config.yaml: |
    {
      "service_name": "normaldance",
      "sampler": {
        "type": "const",
        "param": 1
      },
      "reporter": {
        "logSpans": true,
        "localAgentHostPort": "jaeger:6831"
      }
    }
  tracing-config.yaml: |
    {
      "service_name": "normaldance",
      "jaeger": {
        "endpoint": "http://jaeger:14268/api/traces",
        "timeout": 5
      }
    }
  logging-config.json: |
    {
      "level": "{{ .Values.logging.level }}",
      "format": "{{ .Values.logging.format }}",
      "outputs": {
        "console": {
          "enabled": true,
          "level": "{{ .Values.logging.level }}"
        },
        "file": {
          "enabled": true,
          "path": "/var/log/app.log",
          "level": "{{ .Values.logging.level }}"
        },
        "elasticsearch": {
          "enabled": {{ .Values.logging.elasticsearch.enabled | toString }},
          "url": "{{ .Values.logging.elasticsearch.url }}",
          "index": "normaldance-logs"
        }
      }
    }
  monitoring-config.json: |
    {
      "metrics": {
        "enabled": {{ .Values.monitoring.metrics.enabled | toString }},
        "port": {{ .Values.monitoring.metrics.port }},
        "path": "/metrics"
      },
      "tracing": {
        "enabled": {{ .Values.monitoring.tracing.enabled | toString }},
        "jaeger": {
          "endpoint": "{{ .Values.monitoring.tracing.jaeger.endpoint }}"
        }
      },
      "health": {
        "enabled": {{ .Values.monitoring.health.enabled | toString }},
        "path": "/health"
      }
    }
  security-config.json: |
    {
      "cors": {
        "enabled": {{ .Values.security.cors.enabled | toString }},
        "origins": {{ .Values.security.cors.origins | toJson }},
        "methods": ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
        "headers": ["Content-Type", "Authorization"]
      },
      "csrf": {
        "enabled": {{ .Values.security.csrf.enabled | toString }},
        "secret": "{{ .Values.security.csrf.secret }}"
      },
      "rateLimit": {
        "enabled": {{ .Values.security.rateLimit.enabled | toString }},
        "windowMs": {{ .Values.security.rateLimit.windowMs }},
        "max": {{ .Values.security.rateLimit.max }}
      },
      "hsts": {
        "enabled": {{ .Values.security.hsts.enabled | toString }},
        "maxAge": {{ .Values.security.hsts.maxAge }},
        "includeSubDomains": {{ .Values.security.hsts.includeSubDomains | toString }}
      },
      "csp": {
        "enabled": {{ .Values.security.csp.enabled | toString }},
        "policy": "{{ .Values.security.csp.policy }}"
      }
    }
  backup-config.json: |
    {
      "enabled": {{ .Values.backup.enabled | toString }},
      "schedule": "{{ .Values.backup.schedule }}",
      "retention": {
        "days": {{ .Values.backup.retention.days }},
        "count": {{ .Values.backup.retention.count }}
      },
      "storage": {
        "provider": "{{ .Values.backup.storage.provider }}",
        "bucket": "{{ .Values.backup.storage.bucket }}",
        "region": "{{ .Values.backup.storage.region }}"
      }
    }
  feature-flags.json: |
    {
      "nft": {{ .Values.features.nft | toString }},
      "staking": {{ .Values.features.staking | toString }},
      "rewards": {{ .Values.features.rewards | toString }},
      "playlists": {{ .Values.features.playlists | toString }},
      "social": {{ .Values.features.social | toString }},
      "mobile": {{ .Values.features.mobile | toString }},
      "analytics": {{ .Values.features.analytics | toString }},
      "search": {{ .Values.features.search | toString }},
      "translation": {{ .Values.features.translation | toString }},
      "video": {{ .Values.features.video | toString }},
      "audio": {{ .Values.features.audio | toString }},
      "push": {{ .Values.features.push | toString }}
    }
  environment-config.json: |
    {
      "NODE_ENV": "{{ .Values.environment }}",
      "PORT": "{{ .Values.service.port }}",
      "HOST": "{{ .Values.host }}",
      "DATABASE_URL": "{{ .Values.database.url }}",
      "REDIS_URL": "{{ .Values.redis.url }}",
      "JWT_SECRET": "{{ .Values.auth.jwt.secret }}",
      "IPFS_GATEWAY": "{{ .Values.ipfs.gateway }}",
      "SOLANA_NETWORK": "{{ .Values.solana.network }}",
      "STRIPE_PUBLISHABLE_KEY": "{{ .Values.stripe.publishableKey }}",
      "ANALYTICS_TRACKING_ID": "{{ .Values.analytics.trackingId }}",
      "LOG_LEVEL": "{{ .Values.logging.level }}"
    }