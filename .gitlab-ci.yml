# GitLab CI/CD Pipeline –¥–ª—è DNB1ST –ø—Ä–æ–µ–∫—Ç–∞
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ Render

stages:
  - test
  - build
  - deploy
  - monitor

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
variables:
  NODE_VERSION: "20.x"
  RENDER_SERVICE_DNB1ST_RU: "dnb1st-ru"
  RENDER_SERVICE_DNB1ST_STORE: "dnb1st-store"
  RENDER_API_TOKEN: $RENDER_API_TOKEN
  RENDER_SERVICE_ID_DNB1ST_RU: $RENDER_SERVICE_ID_DNB1ST_RU
  RENDER_SERVICE_ID_DNB1ST_STORE: $RENDER_SERVICE_ID_DNB1ST_STORE

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Å–±–æ—Ä–∫–∏
cache:
  paths:
    - node_modules/
    - .next/
  key: "$CI_COMMIT_REF_NAME"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
setup_dependencies:
  stage: test
  image: node:$NODE_VERSION
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run lint
    - npm run test
  coverage: '/Lines\s*:\s*(\d+\.\d+)%/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
    paths:
      - coverage/
    expire_in: 1 week
  only:
    - main
    - develop
    - merge_requests
    - tags

# –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
build_application:
  stage: build
  image: node:$NODE_VERSION
  script:
    - npm ci --cache .npm --prefer-offline
    - npm run build
  artifacts:
    paths:
      - .next/
      - out/
    expire_in: 1 week
  only:
    - main
    - develop
    - tags

# –î–µ–ø–ª–æ–π –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ (dnb1st.ru)
deploy_dnb1st_ru:
  stage: deploy
  image: curlimages/curl:latest
  dependencies:
    - build_application
  script:
    - |
      # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ö—ç—à –∫–æ–º–º–∏—Ç–∞
      COMMIT_SHA=$CI_COMMIT_SHA
      BRANCH_NAME=$CI_COMMIT_REF_NAME
      
      # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–µ–ø–ª–æ—è
      if [[ "$CI_COMMIT_BRANCH" == "main" ]]; then
        ENVIRONMENT="production"
        SERVICE_NAME="$RENDER_SERVICE_DNB1ST_RU"
        SERVICE_ID="$RENDER_SERVICE_ID_DNB1ST_RU"
      elif [[ "$CI_COMMIT_BRANCH" == "develop" ]]; then
        ENVIRONMENT="staging"
        SERVICE_NAME="$RENDER_SERVICE_DNB1ST_RU"
        SERVICE_ID="$RENDER_SERVICE_ID_DNB1ST_RU"
      else
        ENVIRONMENT="preview"
        SERVICE_NAME="$RENDER_SERVICE_DNB1ST_RU-preview"
        SERVICE_ID="$RENDER_SERVICE_ID_DNB1ST_RU"
      fi
      
      echo "Deploying $SERVICE_NAME to $ENVIRONMENT environment..."
      echo "Commit: $COMMIT_SHA"
      echo "Branch: $BRANCH_NAME"
      
      # –°–æ–∑–¥–∞–µ–º –¥–µ–ø–ª–æ–π –Ω–∞ Render
      curl -X POST \
        -H "Authorization: Bearer $RENDER_API_TOKEN" \
        -H "Content-Type: application/json" \
        -d "{
          \"service_id\": \"$SERVICE_ID\",
          \"env\": \"$ENVIRONMENT\",
          \"git\": {
            \"branch\": \"$BRANCH_NAME\",
            \"commit_sha\": \"$COMMIT_SHA\"
          },
          \"env_vars\": [
            {
              \"key\": \"COMMIT_SHA\",
              \"value\": \"$COMMIT_SHA\"
            },
            {
              \"key\": \"BRANCH_NAME\",
              \"value\": \"$BRANCH_NAME\"
            },
            {
              \"key\": \"DEPLOY_ENVIRONMENT\",
              \"value\": \"$ENVIRONMENT\"
            }
          ]
        }" \
        "https://api.render.com/v1/services/$SERVICE_ID/deploys"
      
      echo "Deployment triggered successfully for $SERVICE_NAME"
  environment:
    name: $CI_COMMIT_REF_NAME
    url: https://$RENDER_SERVICE_DNB1ST_RU.onrender.com
  only:
    - main
    - develop
    - merge_requests
  when: manual

# –î–µ–ø–ª–æ–π –º–∞–≥–∞–∑–∏–Ω–∞ (dnb1st.store)
deploy_dnb1st_store:
  stage: deploy
  image: curlimages/curl:latest
  dependencies:
    - build_application
  script:
    - |
      # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ö—ç—à –∫–æ–º–º–∏—Ç–∞
      COMMIT_SHA=$CI_COMMIT_SHA
      BRANCH_NAME=$CI_COMMIT_REF_NAME
      
      # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–µ–ø–ª–æ—è
      if [[ "$CI_COMMIT_BRANCH" == "main" ]]; then
        ENVIRONMENT="production"
        SERVICE_NAME="$RENDER_SERVICE_DNB1ST_STORE"
        SERVICE_ID="$RENDER_SERVICE_ID_DNB1ST_STORE"
      elif [[ "$CI_COMMIT_BRANCH" == "develop" ]]; then
        ENVIRONMENT="staging"
        SERVICE_NAME="$RENDER_SERVICE_DNB1ST_STORE"
        SERVICE_ID="$RENDER_SERVICE_ID_DNB1ST_STORE"
      else
        ENVIRONMENT="preview"
        SERVICE_NAME="$RENDER_SERVICE_DNB1ST_STORE-preview"
        SERVICE_ID="$RENDER_SERVICE_ID_DNB1ST_STORE"
      fi
      
      echo "Deploying $SERVICE_NAME to $ENVIRONMENT environment..."
      echo "Commit: $COMMIT_SHA"
      echo "Branch: $BRANCH_NAME"
      
      # –°–æ–∑–¥–∞–µ–º –¥–µ–ø–ª–æ–π –Ω–∞ Render
      curl -X POST \
        -H "Authorization: Bearer $RENDER_API_TOKEN" \
        -H "Content-Type: application/json" \
        -d "{
          \"service_id\": \"$SERVICE_ID\",
          \"env\": \"$ENVIRONMENT\",
          \"git\": {
            \"branch\": \"$BRANCH_NAME\",
            \"commit_sha\": \"$COMMIT_SHA\"
          },
          \"env_vars\": [
            {
              \"key\": \"COMMIT_SHA\",
              \"value\": \"$COMMIT_SHA\"
            },
            {
              \"key\": \"BRANCH_NAME\",
              \"value\": \"$BRANCH_NAME\"
            },
            {
              \"key\": \"DEPLOY_ENVIRONMENT\",
              \"value\": \"$ENVIRONMENT\"
            }
          ]
        }" \
        "https://api.render.com/v1/services/$SERVICE_ID/deploys"
      
      echo "Deployment triggered successfully for $SERVICE_NAME"
  environment:
    name: $CI_COMMIT_REF_NAME
    url: https://$RENDER_SERVICE_DNB1ST_STORE.onrender.com
  only:
    - main
    - develop
    - merge_requests
  when: manual

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–µ–ø–ª–æ—è
monitor_deployment:
  stage: monitor
  image: curlimages/curl:latest
  script:
    - |
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è
      SERVICE_ID="$RENDER_SERVICE_ID_DNB1ST_RU"
      
      # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–ø–ª–æ—è
      DEPLOY_STATUS=$(curl -s \
        -H "Authorization: Bearer $RENDER_API_TOKEN" \
        "https://api.render.com/v1/services/$SERVICE_ID/deploys" | \
        jq -r '.[0].status')
      
      echo "Latest deployment status: $DEPLOY_STATUS"
      
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint
      HEALTH_CHECK=$(curl -s -o /dev/null -w "%{http_code}" \
        "https://$RENDER_SERVICE_DNB1ST_RU.onrender.com/api/health")
      
      echo "Health check status: $HEALTH_CHECK"
      
      # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Slack –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      if [[ "$DEPLOY_STATUS" == "succeeded" ]] && [[ "$HEALTH_CHECK" == "200" ]]; then
        echo "‚úÖ Deployment successful and healthy"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Slack
        curl -X POST \
          -H "Content-type: application/json" \
          -d "{
            \"text\": \"üöÄ Deployment successful for $CI_PROJECT_NAME\",
            \"attachments\": [
              {
                \"color\": \"good\",
                \"fields\": [
                  {
                    \"title\": \"Service\",
                    \"value\": \"$RENDER_SERVICE_DNB1ST_RU\",
                    \"short\": true
                  },
                  {
                    \"title\": \"Environment\",
                    \"value\": \"$CI_COMMIT_REF_NAME\",
                    \"short\": true
                  },
                  {
                    \"title\": \"Commit\",
                    \"value\": \"$CI_COMMIT_SHA\",
                    \"short\": true
                  },
                  {
                    \"title\": \"URL\",
                    \"value\": \"https://$RENDER_SERVICE_DNB1ST_RU.onrender.com\",
                    \"short\": false
                  }
                ]
              }
            ]
          }" \
          "$SLACK_WEBHOOK_URL"
      else
        echo "‚ùå Deployment failed or health check failed"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ Slack
        curl -X POST \
          -H "Content-type: application/json" \
          -d "{
            \"text\": \"‚ùå Deployment failed for $CI_PROJECT_NAME\",
            \"attachments\": [
              {
                \"color\": \"danger\",
                \"fields\": [
                  {
                    \"title\": \"Service\",
                    \"value\": \"$RENDER_SERVICE_DNB1ST_RU\",
                    \"short\": true
                  },
                  {
                    \"title\": \"Environment\",
                    \"value\": \"$CI_COMMIT_REF_NAME\",
                    \"short\": true
                  },
                  {
                    \"title\": \"Status\",
                    \"value\": \"$DEPLOY_STATUS\",
                    \"short\": true
                  },
                  {
                    \"title\": \"Health Check\",
                    \"value\": \"$HEALTH_CHECK\",
                    \"short\": true
                  },
                  {
                    \"title\": \"Commit\",
                    \"value\": \"$CI_COMMIT_SHA\",
                    \"short\": false
                  }
                ]
              }
            ]
          }" \
          "$SLACK_WEBHOOK_URL"
        
        exit 1
      fi
  only:
    - main
    - develop
    - merge_requests
  when: on_success

# –û—Ç–∫–∞—Ç –¥–µ–ø–ª–æ—è (rollback)
rollback_deployment:
  stage: deploy
  image: curlimages/curl:latest
  script:
    - |
      SERVICE_ID="$RENDER_SERVICE_ID_DNB1ST_RU"
      
      # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–µ–ø–ª–æ–µ–≤
      DEPLOYS=$(curl -s \
        -H "Authorization: Bearer $RENDER_API_TOKEN" \
        "https://api.render.com/v1/services/$SERVICE_ID/deploys")
      
      # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —É—Å–ø–µ—à–Ω—ã–π –¥–µ–ø–ª–æ–π
      PREVIOUS_DEPLOY=$(echo "$DEPLOYS" | jq -r '.[] | select(.status == "succeeded") | .id' | head -2 | tail -1)
      
      if [[ -n "$PREVIOUS_DEPLOY" ]]; then
        echo "Rolling back to deployment: $PREVIOUS_DEPLOY"
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ–ø–ª–æ–π —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–º–º–∏—Ç–∞
        curl -X POST \
          -H "Authorization: Bearer $RENDER_API_TOKEN" \
          -H "Content-Type: application/json" \
          -d "{
            \"service_id\": \"$SERVICE_ID\",
            \"env\": \"production\",
            \"git\": {
              \"commit_sha\": \"$(echo \"$DEPLOYS\" | jq -r --arg id "$PREVIOUS_DEPLOY" '.[] | select(.id == $id) | .git.commit_sha')\"
            }
          }" \
          "https://api.render.com/v1/services/$SERVICE_ID/deploys"
        
        echo "Rollback initiated successfully"
      else
        echo "No previous successful deployment found"
        exit 1
      fi
  environment:
    name: production
    url: https://$RENDER_SERVICE_DNB1ST_RU.onrender.com
  when: manual
  only:
    - main

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞
pipeline_notification:
  stage: monitor
  image: curlimages/curl:latest
  script:
    - |
      if [[ "$CI_JOB_STATUS" == "success" ]]; then
        EMOJI="‚úÖ"
        COLOR="good"
        STATUS="Success"
      else
        EMOJI="‚ùå"
        COLOR="danger"
        STATUS="Failed"
      fi
      
      curl -X POST \
        -H "Content-type: application/json" \
        -d "{
          \"text\": \"$EMOJI Pipeline $STATUS for $CI_PROJECT_NAME\",
          \"attachments\": [
            {
              \"color\": \"$COLOR\",
              \"fields\": [
                {
                  \"title\": \"Project\",
                  \"value\": \"$CI_PROJECT_NAME\",
                  \"short\": true
                },
                {
                  \"title\": \"Branch\",
                  \"value\": \"$CI_COMMIT_BRANCH\",
                  \"short\": true
                },
                {
                  \"title\": \"Commit\",
                  \"value\": \"$CI_COMMIT_SHA\",
                  \"short\": true
                },
                {
                  \"title\": \"Job\",
                  \"value\": \"$CI_JOB_NAME\",
                  \"short\": true
                },
                {
                  \"title\": \"Status\",
                  \"value\": \"$STATUS\",
                  \"short\": true
                },
                {
                  \"title\": \"URL\",
                  \"value\": \"$CI_PIPELINE_URL\",
                  \"short\": false
                }
              ]
            }
          ]
        }" \
        "$SLACK_WEBHOOK_URL"
  only:
    - main
    - develop
    - merge_requests

# –ó–∞–¥–∞—á–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
security_scan:
  stage: test
  image: node:$NODE_VERSION
  script:
    - npm ci --cache .npm --prefer-offline
    - npm audit --audit-level moderate
    - npm audit --audit-level high --audit-level critical
  allow_failure: true
  only:
    - main
    - develop
    - tags

# –ó–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
performance_test:
  stage: test
  image: node:$NODE_VERSION
  script:
    - npm ci --cache .npm --prefer-offline
    - npm run build
    - npm run test:performance
  allow_failure: true
  only:
    - main
    - tags

# –ó–∞–¥–∞—á–∏ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
generate_docs:
  stage: build
  image: node:$NODE_VERSION
  script:
    - npm ci --cache .npm --prefer-offline
    - npm run generate:docs
  artifacts:
    paths:
      - docs/
    expire_in: 1 week
  only:
    - main
    - develop
    - tags